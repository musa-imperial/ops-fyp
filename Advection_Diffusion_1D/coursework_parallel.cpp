//
// auto-generated by ops.py
//
#include <math.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#define OPS_2D
#include <ops_seq_v2.h>


double a = 1;
double alpha = 0.003;
//double dx = 0.01;
double dt = 0.00001;
double L = 1;

int n = 101;//L/dx+1;
double dx = L/(n-1);
double _time = 0.5;
double pi = 3.14159265359;

double C1 = (-a/2/dx+alpha/dx/dx)*dt;
double C2 = 1-2*alpha*dt/dx/dx;
double C3 = (a/2/dx+alpha/dx/dx)*dt;
#include "cw_kernels.h"

int main(int argc, const char** argv)
{
  ops_init(argc, argv, 1);

  FILE *file = fopen("result.txt", "w");

  if (file == NULL) {
        printf("Unable to open the file.\n");
        return 1;
    }


  double *u = NULL;
  double *unew = NULL;

  ops_block block = ops_decl_block(1, "my_grid");
  double sigma = a*dt/dx;
  if (sigma > 0.5) {
    printf("CFL number too large: %.2f\n", sigma);
    exit(1);
  }
  else {
    printf("CFL number: %.2f\n", sigma);
  }
  int size[] = {n};

  int base[] = {0};

  int d_m[] = {-1};
  int d_p[] = { 1};

  ops_dat d_u = ops_decl_dat(block, 1, size, base,
                              d_m, d_p, u, "double", "u");

  ops_dat d_unew = ops_decl_dat(block, 1, size, base, 
                              d_m, d_p, unew, "double", "unew");
  
  ops_decl_const("a", 1, "double", &a);
  ops_decl_const("alpha", 1, "double", &alpha);
  ops_decl_const("dt", 1, "double", &dt);
  ops_decl_const("L", 1, "double", &L);
  ops_decl_const("dx", 1, "double", &dx);
  ops_decl_const("_time", 1, "double", &_time);
  ops_decl_const("pi", 1, "double", &pi);
  ops_decl_const("C1", 1, "double", &C1);
  ops_decl_const("C2", 1, "double", &C2);
  ops_decl_const("C3", 1, "double", &C3);


  //for the fix bc on the left
  int s1d_0[] = {0};
  ops_stencil S1D_0 = ops_decl_stencil(1, 1, s1d_0, "0");

  //for the outflow bc on the right
  int s1d_neg1[] = {-1};
  ops_stencil S1D_neg1 = ops_decl_stencil(1, 1, s1d_neg1, "-1");

  //for main loop over block
  int s1d_3pt[] = {-1, 0, 1};
  ops_stencil S1D_3pt = ops_decl_stencil(1, 3, s1d_3pt, "3pt");

  ops_partition("");

  //set boundary conditions

  int left_range[] = {0, 1};
  int right_range[] = {n, n+1};

  int interior_range[] = {1, n};

  ops_par_loop(set_zero, "set_zero", block, 1, left_range,
                ops_arg_dat(d_u, 1, S1D_0, "double", OPS_WRITE));

  ops_par_loop(set_zero, "set_zero", block, 1, right_range,
                ops_arg_dat(d_u, 1, S1D_0, "double", OPS_WRITE));

  ops_par_loop(left_bndcon, "left_bndcon", block, 1, left_range,
              ops_arg_dat(d_u, 1, S1D_0, "double", OPS_WRITE),
              ops_arg_idx());

  ops_par_loop(set_zero, "set_zero", block, 1, left_range,
                ops_arg_dat(d_unew, 1, S1D_0, "double", OPS_WRITE));

  ops_par_loop(set_zero, "set_zero", block, 1, right_range,
                ops_arg_dat(d_unew, 1, S1D_0, "double", OPS_WRITE));

  ops_par_loop(left_bndcon, "left_bndcon", block, 1, left_range,
              ops_arg_dat(d_unew, 1, S1D_0, "double", OPS_WRITE),
              ops_arg_idx());

  ops_par_loop(right_bndcon, "right_bndcon", block, 1, right_range,
              ops_arg_dat(d_unew, 1, S1D_neg1, "double", OPS_WRITE),
              ops_arg_idx());

  
  ops_par_loop(initcond_stencil, "initcond_stencil", block, 1, interior_range,
              ops_arg_dat(d_u, 1, S1D_0, "double", OPS_WRITE),
              ops_arg_idx());

    ops_par_loop(right_bndcon, "right_bndcon", block, 1, right_range,
              ops_arg_dat(d_u, 1, S1D_neg1, "double", OPS_WRITE),
              ops_arg_idx());


  
  ops_print_dat_to_txtfile(d_u, "results_before.txt");

  double t = 0;

  while ( t < _time )
  {
    
    ops_par_loop(apply_stencil, "apply_stencil", block, 1, interior_range, 
      ops_arg_dat(d_u,    1, S1D_3pt, "double", OPS_READ),
      ops_arg_dat(d_unew, 1, S1D_0,  "double", OPS_WRITE));
    

    ops_par_loop(copy, "copy", block, 1, interior_range,
          ops_arg_dat(d_u,    1, S1D_0, "double", OPS_WRITE),
          ops_arg_dat(d_unew, 1, S1D_0, "double", OPS_READ));
    

    ops_par_loop(right_bndcon, "right_bndcon", block, 1, right_range,
          ops_arg_dat(d_u, 1, S1D_neg1, "double", OPS_WRITE),
          ops_arg_idx());
    

    t = t + dt;
  }



  ops_print_dat_to_txtfile(d_u, "results_after.txt");

  


  fclose(file);

  printf("Matrix data has been written to result.txt.\n");


  printf("Program complete");

  ops_exit();

  free(u);
  free(unew);
  return 0;
}

